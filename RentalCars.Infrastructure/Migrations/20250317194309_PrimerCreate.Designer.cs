// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentalCars.Infrastructure.Persistence;

#nullable disable

namespace RentalCars.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250317194309_PrimerCreate")]
    partial class PrimerCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RentalCars.Domain.Entities.Caracteristica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Caracteristicas");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.ImagenVehiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EsPrincipal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("VehiculoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehiculoId");

                    b.ToTable("ImagenVehiculos");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Notificacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Pago", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("MetodoPago")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("ReservaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReservaId")
                        .IsUnique();

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Regla", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Reglas");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Resena", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Calificacion")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("CriticoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaResena")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReservaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehiculoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CriticoId");

                    b.HasIndex("ReservaId")
                        .IsUnique();

                    b.HasIndex("VehiculoId");

                    b.ToTable("Resenas");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Reserva", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Calificacion")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PrecioTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid?>("SancionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehiculoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Sancion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaSancion")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Monto")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("ReservaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReservaId")
                        .IsUnique();

                    b.ToTable("Sanciones");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContraseñaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UltimaFechaDeIngreso")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Vehiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CapacidadPasajeros")
                        .HasColumnType("int");

                    b.Property<int>("Cilindros")
                        .HasColumnType("int");

                    b.Property<int>("Combustible")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Motor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PrecioPorDia")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("PropietarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Puertas")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<int>("Transmision")
                        .HasColumnType("int");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropietarioId");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.VehiculoCaracteristica", b =>
                {
                    b.Property<Guid>("VehiculoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaracteristicaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehiculoId", "CaracteristicaId");

                    b.HasIndex("CaracteristicaId");

                    b.ToTable("VehiculoCaracteristicas");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.VehiculoFavorito", b =>
                {
                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehiculoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UsuarioId", "VehiculoId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("VehiculoFavoritos");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.VehiculoRegla", b =>
                {
                    b.Property<Guid>("VehiculoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReglaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehiculoId", "ReglaId");

                    b.HasIndex("ReglaId");

                    b.ToTable("VehiculoReglas");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.ImagenVehiculo", b =>
                {
                    b.HasOne("RentalCars.Domain.Entities.Vehiculo", "Vehiculo")
                        .WithMany("Images")
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Notificacion", b =>
                {
                    b.HasOne("RentalCars.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Notificaciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Pago", b =>
                {
                    b.HasOne("RentalCars.Domain.Entities.Reserva", "Reserva")
                        .WithOne()
                        .HasForeignKey("RentalCars.Domain.Entities.Pago", "ReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Resena", b =>
                {
                    b.HasOne("RentalCars.Domain.Entities.Usuario", "Critico")
                        .WithMany("Resenas")
                        .HasForeignKey("CriticoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentalCars.Domain.Entities.Reserva", "Reserva")
                        .WithOne("Resena")
                        .HasForeignKey("RentalCars.Domain.Entities.Resena", "ReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentalCars.Domain.Entities.Vehiculo", "Vehiculo")
                        .WithMany("Resenas")
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Critico");

                    b.Navigation("Reserva");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Reserva", b =>
                {
                    b.HasOne("RentalCars.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Reservas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RentalCars.Domain.Entities.Vehiculo", "Vehiculo")
                        .WithMany("Reservas")
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Sancion", b =>
                {
                    b.HasOne("RentalCars.Domain.Entities.Reserva", "Reserva")
                        .WithOne("Sancion")
                        .HasForeignKey("RentalCars.Domain.Entities.Sancion", "ReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Vehiculo", b =>
                {
                    b.HasOne("RentalCars.Domain.Entities.Usuario", "Propietario")
                        .WithMany("Vehiculos")
                        .HasForeignKey("PropietarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Propietario");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.VehiculoCaracteristica", b =>
                {
                    b.HasOne("RentalCars.Domain.Entities.Caracteristica", "Caracteristica")
                        .WithMany("VehiculoCaracteristicas")
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentalCars.Domain.Entities.Vehiculo", "Vehiculo")
                        .WithMany("VehiculoCaracteristicas")
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Caracteristica");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.VehiculoFavorito", b =>
                {
                    b.HasOne("RentalCars.Domain.Entities.Usuario", "Usuario")
                        .WithMany("VehiculoFavoritos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentalCars.Domain.Entities.Vehiculo", "Vehiculo")
                        .WithMany("VehiculosFavoritos")
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.VehiculoRegla", b =>
                {
                    b.HasOne("RentalCars.Domain.Entities.Regla", "Regla")
                        .WithMany("VehiculoReglas")
                        .HasForeignKey("ReglaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentalCars.Domain.Entities.Vehiculo", "Vehiculo")
                        .WithMany("VehiculoReglas")
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Regla");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Caracteristica", b =>
                {
                    b.Navigation("VehiculoCaracteristicas");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Regla", b =>
                {
                    b.Navigation("VehiculoReglas");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Reserva", b =>
                {
                    b.Navigation("Resena")
                        .IsRequired();

                    b.Navigation("Sancion");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Notificaciones");

                    b.Navigation("Resenas");

                    b.Navigation("Reservas");

                    b.Navigation("VehiculoFavoritos");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("RentalCars.Domain.Entities.Vehiculo", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Resenas");

                    b.Navigation("Reservas");

                    b.Navigation("VehiculoCaracteristicas");

                    b.Navigation("VehiculoReglas");

                    b.Navigation("VehiculosFavoritos");
                });
#pragma warning restore 612, 618
        }
    }
}
